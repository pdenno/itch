
* ToDo
** DONE Draw a BlockShape (probably CmdShape) with quil. 
   CLOSED: [2017-12-04 Mon 07:53]
** TODO Move blocks.
** TODO Make text/number fields editable. (Make number fields.)
** TODO Create stacks.
** TODO Create C and E style blocks, other blocks.
** TODO Create scripts tab.
** TODO Investigate GUI plugins.  
* Notes, general
** Use of quil on scripts-tab/script-window:
 It might be necessary for scripts-tab/scripts window to be one integrated quil thing.
 Otherwise, I don't see how we can smoothly drag a Block from the Scripts-tab to the scripts-window.

**  GUI Plugins:

What does cross mode mean and why "the Processings"? The future 2.0 Processing will have "modes" 
which are additional language flavours to write and use Processing in. One is the JavaScript mode 
which is based upon Processing.js. Guido is an attempt at writing a GUI library that supports both 
Java and JavaScript, so any sketch using it should run on both modes.

*** [[https://github.com/fjenett/Guido][Guido]] : Not touched in 4 years. Has a JS mode (for "the future 2.0 Processing"). 
*** [[http://www.lagers.org.uk/g4p/][G4P]] Looks like it has everything you'd want for 2d GUIs... Does not work in Javascript mode. 
       May be useful to build your own in ClojureScript.
*** [[https://github.com/sojamo/controlp5#javascript][Controlp5]] : Not touched in 2 years. 
Currently there is no javascript version of ControlP5, though I had started implementing a 
slimmed down version for processing.js but since it is currently unclear which javascript 
version - processing.js or p5.js - will become the default js version of processing, 
controlP5.js is on hold. There is a tendency that p5.js will become the primary 
javascript environment [I note that the Processing Foundation supports Processing (java)
p5.js and Processing.py.]

*** So what to do?
I think maybe just write my own, following the design of G4P, which has small
files implementing lots of things. 

** Processing version 
*** [[http://processingjs.org/download/][Processing.js]] Last version is March, 2014. 
*** [[p5.js][https://p5js.org/]]  Last version is October, 2017.
    [[https://github.com/bitcraftlab/p5.gui][p5.gui last update was 4 months ago]]. 

Problem?: Processing.js library is used as rendering backend for Quil on ClojureScript.
BTW: "Use quil-cljs Leiningen template to create a project from scratch:"
     --> lein new quil-cljs hello-quil

** Quil fuzzyness problem in browser
  Scratch is fuzzy too.   


* Notes on Scratch
** Blocks
  [[file:~/Documents/git/scratch-flash/src/blocks/][Blocks]] (directory) -- right click to open in emacs. 
** Functional Reactive Programming
 Should this be what we are after? Use map, reduce, filter to do animation?  [[https://en.wikipedia.org/wiki/Functional_reactive_programming][FRP on Wikipedia]]

  Evan Czaplicki's [[https://www.seas.harvard.edu/sites/default/files/files/archived/Czaplicki.pdf][Paper on Elm]]. 

*** BlockShape.as
// [[file:~/Documents/git/scratch-flash/src/blocks/BlockShape.as::*%20Scratch%20Project%20Editor%20and%20Player][BlockShape]] handles drawing and resizing of a block shape.
This seems to be the one to start with. Goal: draw some of these with quill.
**** Some shapes
***** Simple RectShape, BooleanShape, NumberShape, CmdShape, FinalCmdShape, HatShape, ProcHatShape
***** C-shaped: LoopShape, FinalLoopShape
***** E-shaped: IfElseShape
	// Geometry
	public static const NotchDepth:int = 3;
	public static const EmptySubstackH:int = 12;
	public static const SubstackInset:int = 15;

*** Block.as
// A Block is a graphical object representing a program statement (command)
// or function (reporter). A stack is a sequence of command blocks, where
// the following command and any nested commands (e.g. within a loop) are
// children. Blocks come in a variety of shapes and usually have some
// combination of label strings and arguments (also children).
//
// The Block class manages block shape, labels, arguments, layout, and
// block sequence. It also supports generation of the labels and argument
// sequence from a specification string (e.g. "%n + %n") and type (e.g. reporter).


*** BlockArg.as
// A BlockArg represents a Block argument slot. Some BlockArgs, contain
// a text field that can be edited by the user. Others (e.g. booleans)
// are immutable. In either case, they be replaced by a reporter block
// of the right type. That is, dropping a reporter block onto a BlockArg
// inside a block causes the BlockArg to be replaced by the reporter.
// If a reporter is removed, a BlockArg is added to the block.
//
// To create a custom BlockArg widget such as a color picker, make a
// subclass of BlockArg for the widget. Your constructor is responsible
// for adding child display objects and setting its width and height.
// The widget must initialize argValue and update it as the user
// interacts with the widget. In some cases, the widget may need to
// override the setArgValue() method. If the widget can accept dropped
// arguments, it should set base to a BlockShape to support drag feedback.




* Log
** <2017-12-01 Fri>
*** Started!
** <2017-12-02 Sat>
*** Basic stuff for scripts tab/blocks
 I'm guessing that the most basic useful block has 'CmdShape' (the Scratch term). 
** <2017-12-03 Sun>
*** I probably won't need this:
(defn widget-interleave
  [features]
  "Create a vector of text/widget features i
  (let [text    (:text features)
        widgets (:widgets features)
        inter (vec (interleave text widget))]
    (if (== (count text) (coutn widget))
      inter
      (conj inter (last text)))))

*** I wrote/arranged the basic block widgets (text and text fields in widgets). 
